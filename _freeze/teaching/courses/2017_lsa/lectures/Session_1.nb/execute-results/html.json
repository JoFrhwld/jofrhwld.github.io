{
  "hash": "04c2fbb3d65f3da856e1db425fbed6de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to R\"\nimage: figures/cran_package.png\norder: 1\nknitr: \n  opts_chunk: \n    error: true\n    warning: false\n---\n\n\n## Hellos\n\nWelcome to *Statistical Modelling with R*. If there is one thing to remember from this course, it is that your analysis workflow should look something like this:\n\n![](figures/workflow.svg){fig-align=\"center\"}\n\n------------------------------------------------------------------------\n\n## The process of learning R and Modelling\n\nThese are some of the core areas I figure are necessary to getting good at statistical modelling in R:\n\n1.  Using R (and RStudio) well\n2.  Feeling comfortable and fluid reorganizing and summarizing data\n3.  **Visualizing Data**\n4.  Deciding before you model what you want to compare to what\n5.  How to translate your analysis goals into R code\n6.  Understanding a little bit about statistics\n7.  When something goes wrong, being able to accurately attribute your difficulty to one of the above topics\n\nThese are all skills you can achieve through practice, experience, and occasional guidance from someone more skilled than you. It is exactly like acquiring any other skill or craft. At first it will be confusing, you'll make some mistakes, and it won't look so good. I think\n\n::: {layout=\"[45,-10,45]\"}\n![The first hat I ever knit](figures/firsthat.jpg)\n\n![The most recent hat I knit](figures/lasthat.jpg)\n:::\n\nThe way I improved my knitting is exactly the same as how you can improve your R programming ability:\n\n-   I knit a lot (almost every day).\n-   I memorized a bunch of stuff.\n-   Remembered where to look up the stuff I don't have memorized.\n-   My knitting became more \"idiomatic\" (i.e. I started knitting like how other knitters knit).\n-   I learned how to identify and fix mistakes without undoing my entire project.\n-   I developed good workspace hygiene & organization.\n-   As I got the basics down, I started researching and incorporating fussy little details into my work.\n\nMost of the content of the course is devoted to core R programming (things you should be memorizing or remembering where to find help), but I'll try my best to annotate portions of the notes which correspond to workspace hygiene, being idiomatic, etc, so that you can distinguish between them.\n\n------------------------------------------------------------------------\n\n## Course Outline\n\nThe course will follow the workflow outlined at the beginning: `begin → summarize → visualize → analyze`.\n\n| Week |               Monday                |            Thursday            |\n|------------------:|:-------------------------:|:------------------------:|\n|    1 |                 --                  |  Intro - Basics & R Notebooks  |\n|    2 |        Data Frames & Factors        | Split-Apply-Combine, Reshaping |\n|    3 |               ggplot2               |     Fitting Linear Models      |\n|    4 | map functions & fitting many models |  Mixed Effects Linear models   |\n|    5 |     Bootstraps & Visualization      |               --               |\n\n::: callout-tip\n## Workspace Hygiene\n\n### Recommended Course Directory Structure\n\nIf you have a directory planning structure that you're happy with, go ahead and do that. But if how to organize your R analysis life is something you'd like to get out of this course, I'd recommend the following directory structure & naming conventions.\n\n```         \n├── lsa_2017\n│   └── r_modelling*\n│       ├── assignments\n│       ├── data\n│       └── lectures\n        \n```\n\nThe r_modelling directory will be the home directory for the course. I would recommend creating a new R Notebook for each lecture (more on that in a moment) and giving them a naming convention like:\n\n```         \n01_lecture.Rmd\n02_lecture.Rmd\n```\n\nRight now **eliminate the impulse to create any folders or file names with spaces in them**.\n:::\n\n------------------------------------------------------------------------\n\n## R, RStudio and R Notebooks\n\nWe're going to be using R, RStudio, and R Notebooks in this course, and it's a little important to keep straight what these three things are:\n\n### R\n\n**R** is a programming language that runs on your computer. At its barest bones, it looks like this:\n\n![](figures/2__R.png){fig-align=\"center\" width=\"80%\"}\n\nYou can type text into the prompt there, and if you've successfully memorized the right R commands, it'll do some things.\n\n### RStudio\n\n**RStudio** is like an Instagram filter over to of R, to make your R use experience better. It visually organizes some important components of using R into panes, and offers *code completion* suggestions. For example, if you ember there's something called a \"Wilcoxon test\", but you don't remember what the function in R is, you can start typing in `Wilc`, and this will happen:\n\n![](figures/codeCompletion.png){fig-align=\"center\" width=\"80%\"}\n\nRStudio's autocompletion is really useful for a lot of other things, like reminding you what the column names are in your data frame, what the names of all the arguments to a function are, etc.\n\nBut perhaps the most valuable component in R Studio these days is its authoring tools, like R Notebooks\n\n### R Notebooks\n\nR Notebooks allow you to document your code in plain text, insert R Code chunks, and view the results of the R code all in one place, then compile it into a nice looking notebook.\n\n::: callout-note\n## \\~5 Minute Activity\n\n#### Goals\n\n1.  Start a new RStudio Project.\n2.  Create a new R Notebook.\n3.  Run some code in the R Notebook.\n4.  Preview the R Notebook in HTML\n\n#### Start a new RStudio Project\n\nCreate a new RStudio Project, either by using the menu options `File > New Project` or by clicking on the <img src=\"figures/RProject.png\" style=\"width:2%;\"/></img> icon in the top right corner of the RStudio window. If you have created directory structure above choose *Existing Directory* and choose `r_modelling`. Otherwise, select the options *New Directory* then *Empty Project* and tell it the project name is `r_modelling`\n\n#### Create a new R Notebook\n\nOpen a new R Notebook using the menu command `File > New File > R Notebook`. If this is the first time you've opened an R Notebook on your computer, you'll probably be faced with the following prompt:\n\n::: half-img\n![](figures/install.png)\n:::\n\nClick \"Yes\", and wait for the installation to finish. A window with a bunch of gobbledygook will pop up, and that's fine. Once it's all finished, the new file should open.\n\n#### Run some code in the R Notebook\n\nFirst, run the R code chunk that comes automatically in a new R Notebook by clicking on the green \"play\" button in the top right corner of the code chunk.\n\nNext, insert a new R code chunk at the bottom of the notebook (directions for how to do so are already included in the new R Notebook), and inside, enter:\n\n```         \n\"Hello World\"\n```\n\nThen run this code chunk by clicking the play button.\n\n#### Preview the R Notebook in HTML\n\nClick the \"Preview\" button at the top of the R Notebook panel to compile it into an HTML document. You will need to save the notebook first. In the `lectures` folder, save it as `00_practice.Rmd`\n:::\n\n### Discussion\n\nI'm going to recommend (for now at least) that you run all of your code though an R Notebook. It is possible to just type things into the R console, but that's kind of like dictating a paper into thin air. Once you've spoken the words, they disappear and can be hard to recover.\n\nMy earlier advice would have been to write all of your code in an R script file, but that also separates the code from its results, which can be hard for beginners to keep track of.\n\n------------------------------------------------------------------------\n\n## Installing R Packages\n\nR comes with a lot of functionality installed, but one way that R is extensible is through users' ability to contribute new code & data through it's package management system. We're going to using a number of these packages in the course, especially since a few of them have fundamentally changed the way R programming works in the past 3 years. There's also a course R package I've created to easily distribute sample datasets.\n\nHere's a basic diagram of how R packages work:\n\n![](figures/cran_package.png){fig-align=\"center\" width=\"100%\"}\n\n### Installing Packages\n\n#### `install.packages()`\n\nMost R packages are distributed through CRAN (Comprehensive R Archive Network). When you run function `install.packages(\"x\")`, R checks whether the package `\"x\"` exists on CRAN, and installs it on your computer if it does. You maybe asked to choose a \"CRAN mirror\" the first time you run `install.packages()`. This is because there are many copies of CRAN distributed across the internet. I'd recommend choosing the first option called `0-Cloud`.\n\n#### `install_github()`\n\nAs a package developer, getting a package onto CRAN can be a bit of a pain, so some packages (and development versions of many) are also available on GitHub, which can be easily installed with `devtools::install_github(\"username/package\")`.\n\n### Installing packages is different from loading packages\n\n**Installing** a package is different from **loading** packages. Installing a package only downloads and configures the code on your computer. In order to *use* the contents of a package, you need to load it into your R session with `library()`.\n\n-   You only need to run `install.packages()` once to install a package, or to update a package.\n-   You need to run `library()` at the start of every new R session in order to use the functionality from that package.\n\nFor example, `ggplot()` is a function from the package `ggplot2`. I have already installed `ggplot2` on my computer, but if I try to use `ggplot()` before loading the package with `library()`, I'll get the error that the function was not found.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfoo <- ggplot()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"ggplot2\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(\"ggplot2\"): there is no package called 'ggplot2'\n```\n\n\n:::\n\n```{.r .cell-code}\nfoo <- ggplot()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## \\~2 minute activity\n\nLet's install all of the packages we're going to use in the course. Double check that you're connected to the internet.\n\nCreate a notebook for this lecture called `01_lecture.Rmd`. Copy-paste the following into an R code chunk and run it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\n  c(\"tidyverse\",\n    \"devtools\")\n)\n\nlibrary(\"devtools\")\n\ninstall_github(\"jofrhwld/lsa2017\")\n```\n:::\n\n:::\n\n------------------------------------------------------------------------\n\n## R Basics\n\nWe're now going to run through some very basics of R, specifically:\n\n-   Basic Data Types\n-   Basic Calculations\n-   Assignment\n-   Vectors\n-   Indexing\n\nCreate a new R Notebook. Change the `Title` field to `Intro to R`, and save it as `0_lecture.Rmd` in the folder `lectures`.\n\nAs we come to a code chunk in the lecture, either copy-paste or re-type it into a new code chunk in your lecture R notebook, and run it.\n\n### Basic Calculations\n\nOne way to think of R is as an overblown calculator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3+3 \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\n2*4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\n(369-1)/6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 61.33333\n```\n\n\n:::\n:::\n\n\nBut it's not all that useful to do a bunch of calculations without saving the results for later, which is where assignment comes in.\n\n### Assignment\n\nYou can assign **values** to **variables** using the assignment operator: `<-` or `->` (but in practice, only use `<-`).\n\n::: {style=\"font-family:monospace;font-size:xx-large;text-align:center;\"}\n[variable]{style=\"color:#747474\"} [\\<-]{style=\"color:red\"} [value]{style=\"color:#747474\"}\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 10\ny <- 2*3\n```\n:::\n\n\nOnce you've assigned a value to a variable, you can reuse the value stored in that variable for other purposes, like just printing it out again\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\nOr adding the two values together\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx + y \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16\n```\n\n\n:::\n:::\n\n\nIn short, you can use these variables `x` and `y` like they *are* the values you assigned to them. If this is your first time programming, here are a few things to clarify:\n\n**Note**\n\n-   `x` and `y` didn't exist before you created them by assigning values to them.\n-   You could have chosen *almost* any name for these variables.\n-   You can just as easily assign *new* values to these variables.\n\n::: callout-tip\n## Naming Things\n\n`x` and `y` are lousy names for variables. When it comes to naming variables, there's a famous saying:\n\n> \"There are only two hard things in Computer Science: cache invalidation and naming things.\" --- Phil Karlton\n\nFor best practices on naming variables, I'll refer you to [the tidyverse style guide by Hadley Wickham](http://style.tidyverse.org/syntax.html#object-names). To briefly summarize it:\n\n-   Use only lowercase letters and numbers.\n-   Use `_` to separate words in a a variable name.\n-   You're actually not able to start a variable name with a number.\n\nAlso, be guided by The Principle of Least Effort. Use the minimal amount of characters that are still clearly interpretable.\n\n```         \n# Good Names\nmodel_1\nmodel_full\n\n\n# Bad Names\nthe_first_model_I_ever_fit\njust_trying_out_a_model_with_all_predictors\nm_01\nm_agdf\n```\n\nAlso, just use good judgment. There is nothing in R preventing you from doing stuff like this to yourself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfive <- 10\nten <- 5\n\nyellow <- \"green\"\n```\n:::\n\n:::\n\nAnother thing to keep in mind is that R can't handle any other characters in numeric values other than `0` through `9` and decimal places. All of these will fail:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no commas\nthousand <- 1,000\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:14: unexpected ','\n1: # no commas\n2: thousand <- 1,\n                ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# no spaces\nthousand <- 1 000\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:15: unexpected numeric constant\n1: # no spaces\n2: thousand <- 1 000\n                 ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# like this\nthousand <- 1000\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# no currencies\ndollars <- $1000\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:12: unexpected '$'\n1: # no currencies\n2: dollars <- $\n              ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# no percentages\n\npercent <- 51%\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:14: unexpected input\n2: \n3: percent <- 51%\n                ^\n```\n\n\n:::\n:::\n\n\n#### Additional data types\n\nIn addition to numbers, other basic data types in R are **character** and **logical**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# character data\ndigital_words <- c(\"fam\",\n                   \"Harambe\",\n                   \"tweetstorm\",\n                   \"@\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# logical values\nTRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# a logical test\n(10/2) < 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n#### On using quotes\n\nWhen you enter characters *without* quotes around them, R assumes you're referring to a variable. If you tried to do the assignment above without the quotes, you'll get an error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndigital_words_fail <- c(fam,\n                        Harambe,\n                        tweetstorm)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'fam' not found\n```\n\n\n:::\n:::\n\n\nHere, R saw `fam`, which isn't in quotes, searched the environment for any variables named `fam` and couldn't find any.\n\nWhen you put characters in quotes, R assumes it's a character value, *even if there's a variable by the same name*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndigital_words\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"fam\"        \"Harambe\"    \"tweetstorm\" \"@\"         \n```\n\n\n:::\n\n```{.r .cell-code}\n\"digital_words\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"digital_words\"\n```\n\n\n:::\n:::\n\n\n### Vectors\n\nVectors are essentially lists of data, and can contain characters, numbers, or TRUE FALSE values. There are a number of ways to create vectors in R, and frequently doing data manipulation will produce subvectors of data.\n\n-   `1:10`\n    -   This produces a vector of integers from 1 to 10. Reversing the order of the numbers will produce a vector of decreasing values.\n-   `c(...)`\n    -   This produces a vector of whatever is passed as an argument to `c()`.\n        -   `c(1,2,3,4)`\n-   `seq(from,to,...)`\n    -   This produces a sequence of numbers either by a given increment or evenly spaced to a given length.\n        -   `seq(1,10,by=0.5)`\n        -   `seq(1,10,length=11)`\n-   `rep(x,...)`\n    -   This produces a vector of repetitions of x by a given number of times.\n        -   `rep(1,6)`\n        -   `rep(1:3,2)`\n        -   `rep(\"hello world\",4)`\n\n#### Vector Arithmetic\n\n##### Vector and A Number\n\nA pretty cool and unique feature of R is how you can do arithmetic with vectors. For example, let's say you've interviewed a bunch of speakers of the following ages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nages <- c(18, 35, 41, 62)\n```\n:::\n\n\nIf you wanted to know the year of birth of these speakers, it's as easy as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2017 - ages\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1999 1982 1976 1955\n```\n\n\n:::\n:::\n\n\nR has taken each value in `ages`, and subtracted it from `2017`, and created a new vector with the results.\n\nOr, if you wanted to know in which year these speakers turned 17, it's as easy as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(2017 - ages) + 17\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2016 1999 1993 1972\n```\n\n\n:::\n:::\n\n\n##### Vector and a Vector\n\nOr, let's say these speakers weren't all interviewed the same year. Half were interviewed in the 90s, and half in the 2000s.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninterview_year <- c(1995, 1996, 2003, 2004)\n```\n:::\n\n\nGetting each speaker's date of birth is as simple as:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninterview_year - ages\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1977 1961 1962 1942\n```\n\n\n:::\n:::\n\n\nThis worked because the two vectors, `interview_year` and `ages` were the same length. R took the first values of `age` and subtracted it from the first value of `interview_year`, the second value of `age` and subtracted it from the second value of `interview_year`, etc, creating new vector of the result. You could easily assign this output to a new variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndob <- interview_year - ages\n```\n:::\n\n\nOf course, if you now wanted to know what year these speakers turned 17, you could do it like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(interview_year - ages) + 17\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1994 1978 1979 1959\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## \\~5 minute activity\n\nA Starbucks Grande filter coffee in the UK currently costs £1.85. The value of £1 before the Brexit vote was about \\$1.49. After the vote, it dropped down to about \\$1.31, and lately it's been closer to \\$1.27.\n\nUsing vector arithmetic as much as possible, find out how the value in dollars of my coffee has changed.\n:::\n\n### Indexing\n\nIf you have a bunch of values stored in a vector, and you want to pull out specific ones, you can do so by indexing it with square brackets `[]`.\n\n#### Indexing by Position\n\nLet's start by indexing by position.\n\n::: {style=\"font-family:monospace;font-size:xx-large;text-align:center;\"}\n[vector]{style=\"color:#747474\"}[\\[]{style=\"color:red\"}[position]{style=\"color:#747474\"}[\\]]{style=\"color:red\"}\n:::\n\nR has some built in vectors for you to use, like one called `letters`. We haven't defined `letters`, and it's not listed as being in your R environment, but it's there.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nletters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n\n\n:::\n:::\n\n\nThe first value in a vector has index `1`, the second index `2`, and so on. If you've forgotten what the 19th letter of the alphabet is, you can find it out like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nletters[19]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"s\"\n```\n\n\n:::\n:::\n\n\nIf instead of just one number, you use another vector to index `letters`, you'll get back out another vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyes <- c(25, 5, 19)\nletters[yes]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"y\" \"e\" \"s\"\n```\n\n\n:::\n\n```{.r .cell-code}\nabba <- c(1, 2, 2, 1)\nletters[abba]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"b\" \"b\" \"a\"\n```\n\n\n:::\n:::\n\n\n#### Logical Indexing\n\nYou can also index by logical values.\n\n::: {style=\"font-family:monospace;font-size:xx-large;text-align:center;\"}\n[vector]{style=\"color:#747474\"}[\\[]{style=\"color:red\"}[true false vector]{style=\"color:#747474\"}[\\]]{style=\"color:red\"}\n:::\n\nLet's come back to our vector of speaker's ages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nages\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18 35 41 62\n```\n\n\n:::\n:::\n\n\nIf we make another vector of `TRUE` and `FALSE` values of the same length, we can use it to index `test_vec`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogical_vec <- c(T, F, T, F)\nages[logical_vec]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18 41\n```\n\n\n:::\n:::\n\n\nYou only get back values where the index vector was `TRUE`.\n\nOf course, what you'll usually do is generate a vector of `TRUE` and `FALSE` values by using a logical operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nages > 40\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nages[ages > 40]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 41 62\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## \\~2 minute activity\n\nLet's assume our speakers had the following names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspeaker_names <- c(\"Charlie\", \"Skyler\", \"Sawyer\", \"Jamie\")\n```\n:::\n\n\nUsing logical indexing and the ages in `ages` and year of interview in `interview_year` (or just `dob`, if you assigned anything to that variable), find out which speakers were born after 1960.\n:::\n\n### Logical Operators\n\nThe following operators will return a vector of `TRUE` and `FALSE` values.\n\n| Operator | Meaning                  |\n|----------|--------------------------|\n| `==`     | exactly equal to         |\n| `!=`     | not equal to             |\n| `>`      | greater than             |\n| `<`      | less than                |\n| `>=`     | greater than or equal to |\n| `<`      | less than                |\n| `<=`     | less than or equal to    |\n\nYou can use these to compare vectors to single values, as we've seen, but you can also compare vectors to vectors *if they are the same length*. Comparison is done elementwise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroup_a <- c(20, 10, 13, 60)\ngroup_b <- c(11, 31,  2,  9)\n\ngroup_a < group_b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE FALSE\n```\n\n\n:::\n:::\n\n\nThere are three more operators that have an effect on `TRUE` and `FALSE` vectors.\n\n| Operator | Meaning                                          |\n|----------|--------------------------------------------------|\n| `!`      | not x <br> changes all `T` to `F` and `F` to `T` |\n| \\|       | `x` or `y`                                       |\n| `&`      | `x` and `y`                                      |\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(T, T, F, F)\ny <- c(T, F, T, F)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncbind(\n  x = x,\n  y = y,\n  and = x&y, \n  or = x|y\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         x     y   and    or\n[1,]  TRUE  TRUE  TRUE  TRUE\n[2,]  TRUE FALSE FALSE  TRUE\n[3,] FALSE  TRUE FALSE  TRUE\n[4,] FALSE FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n### `%in%`\n\nThis gets its own heading because it's so useful, and you'll use it a lot. If you say `a %in% b`, R checks every value in `a` to see if it's in `b`.\n\n::: {style=\"font-family:monospace;font-size:xx-large;text-align:center;\"}\n[value]{style=\"color:#747474\"} [%in%]{style=\"color:red\"} [vector]{style=\"color:#747474\"}\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Was Sage in our study?\n\n\"Sage\" %in% speaker_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Was Schuyler in our study?\n\n\"Schuyler\" %in% speaker_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Yes, but not spelled that way.\n\n\"Skyler\" %in% speaker_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nThe first item can also be a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# How about all of these people?\n\ncheck_names <- c(\"Oakley\", \"Charlie\", \"Azaria\", \"Landry\", \"Skyler\", \"Justice\")\ncheck_names %in% speaker_names\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE  TRUE FALSE FALSE  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ncheck_names[check_names %in% speaker_names]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Charlie\" \"Skyler\" \n```\n\n\n:::\n\n```{.r .cell-code}\ncheck_names[!(check_names %in% speaker_names)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Oakley\"  \"Azaria\"  \"Landry\"  \"Justice\"\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}